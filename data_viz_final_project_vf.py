# -*- coding: utf-8 -*-
"""Data-viz-final-project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FTW8kIDlPgN6oftjEBoT3DJBD7JhMnm6
"""

#pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import plotly.colors as pc
import plotly.graph_objects as go
from plotly.graph_objs import FigureWidget
import altair as alt
import pydeck as pdk
from streamlit_dynamic_filters import DynamicFilters

st.set_page_config(
    page_title="Influence of Education, Background and Gender on Employment in India",
    layout="wide")

# Load the dataset
df = pd.read_csv("./Placement_Data_Full_Class.csv")



# Basic Graphs (Introduction)
st.title("Influence of Education and Gender on Employment in India")

# Sidebar
with st.sidebar:
    st.title('Employment Dashboard')
    
    work_ex_options = ['All','Yes', 'No']
    selected_work_ex = st.selectbox('Filter by Previous Work Experience', work_ex_options)
    #df_selected_year = df_reshaped[df_reshaped.year == selected_year]
    #df_selected_year_sorted = df_selected_year.sort_values(by="population", ascending=False)
    #gender_options =  ['All','Male','Female']
    #selected_gender = st.selectbox('Filter by Gender', gender_options)

    color_theme_list = ['blue-yellow', 'green-yellow','pink-blue']
    selected_color_theme = st.selectbox('Select a color theme', color_theme_list)




# Apply filter to DataFrame based on selected value
if selected_work_ex == 'All':
    filtered_df = df.copy()  # No filter applied
else:
   filtered_df = df[df['workex'] == selected_work_ex]
 
    


# Define color mapping for gender based on color theme
color_theme_mapping = {
    'blue-yellow': {'M': '#191970', 'F': '#FFBF00'},
    'green-yellow':{'M': '#2F4F4F', 'F': '#FFD700'},
    'pink-blue': {'M': 'blue', 'F': 'pink'}
}

color_theme_mapping2 = {
    'blue-yellow': {'Placed': '#191970', 'Not Placed': '#FFBF00'},
    'green-yellow':{'Placed': '#2F4F4F', 'Not Placed': '#FFD700'},
    'pink-blue': {'Placed': 'blue', 'Not Placed': 'pink'}
}

def map_color(selected_color_theme):
    if selected_color_theme == 'blue-yellow':
        return '#FFBF00'
    elif selected_color_theme == 'green-yellow':
        return '#2F4F4F'
    elif selected_color_theme == 'pink-blue':
        return 'blue'


#def filter_data(selected_gender):
 #   filtered_data = filtered_df[filtered_df['gender'] == selected_gender]
  #  return filtered_data


# Function to create Bar Chart - Gender Distribution
def gender_distribution(df,color_mapping):
    st.subheader("Gender Distribution")
    gender_counts = df['gender'].value_counts()
    gender_chart = px.pie(gender_counts, names=gender_counts.index, values=gender_counts.values, labels={'Gender':'Count'}, color =gender_counts.index, color_discrete_map=color_mapping)
    st.plotly_chart(gender_chart)
    
color_mappingss = color_theme_mapping[selected_color_theme]    
gender_select = alt.selection_point(fields=["gender"], empty=True)
region_pie = (
    (
        alt.Chart(filtered_df)
        .mark_arc(innerRadius=50)
        .encode(
            theta=alt.Theta(
                "sl_no",
                type="quantitative",
                aggregate="count",
                title="Count of people",
            ),
            color=alt.Color(
                field="gender",
                type="nominal",
                scale=alt.Scale(domain=['M', 'F'], range=[color_mappingss['M'], color_mappingss['F']]),
                title="Gender",
            ),
        )
    )
    .add_selection(gender_select)
    .properties(title="Gender Distribution")
)

status_pie = (
    (
        alt.Chart(filtered_df)
        .mark_arc(innerRadius=50)
        .encode(
            theta=alt.Theta(
                "sl_no",
                type="quantitative",
                aggregate="count",
                title="Count of people"
            ),
            color=alt.Color(
                field="status",
                type="nominal",
                scale=alt.Scale(domain=['Placed', 'Not Placed'], range=['pink', 'yellow']),
                title="Status",
                legend=alt.Legend(title="Status")
            ),
            tooltip=['status', 'count()']
        )
    )
    .transform_filter(gender_select)
    .properties(title="Employment Distribution")
)

def status_distribution(data,color_mapping):

    st.subheader("Employment Distribution")
    status_counts = data['status'].value_counts()
    status_chart = px.pie(status_counts, names=status_counts.index, values=status_counts.values, labels={'Status':'Count'}, color = status_counts.index, color_discrete_map=color_mapping)
    st.plotly_chart(status_chart)

# Function to create Histogram - Secondary Education Percentage
def hist(data):
    st.subheader("Distribution of grades")
    x_axis_mapping = {
        'Secondary school grade %': 'ssc_p',
        'High school grade %': 'hsc_p',
        'Undergraduate grade %': 'degree_p',
        'MBA grade %': 'mba_p'
    }
    x_axis = st.selectbox('Select X-axis variable', list(x_axis_mapping.keys()), format_func=lambda x: x)

    # Get color based on selected theme
    histogram_color = map_color(selected_color_theme)
    print(histogram_color)

    # Plot histogram with selected color theme
    histogram = px.histogram(data, x=x_axis_mapping[x_axis], nbins=20, labels={x_axis_mapping[x_axis]: x_axis}, color_discrete_sequence=[histogram_color])
    histogram.update_yaxes(title_text="Number of students")
    st.plotly_chart(histogram)


def create_violin_plot(color_mapping, df):
    st.subheader("Salary Distribution by Gender")
    violin_plot = px.violin(df, y='salary', x='gender', color='gender', 
                            color_discrete_map=color_mapping)
    # Update X-axis label
    violin_plot.update_xaxes(title_text="Gender")
    violin_plot.update_yaxes(title_text="Salary (INR/yr)")
    st.plotly_chart(violin_plot)
    
    

# Function to create Scatter Plot Matrix - Education Background vs. Salary Offers
def scatter_plot_matrix(color_mapping, df):
    st.subheader("Education Background vs. Salary")
    x_axis_mapping = {
        'Secondary school grade %': 'ssc_p',
        'High school grade %': 'hsc_p',
        'Undergraduate grade %': 'degree_p',
        'MBA grade %': 'mba_p',
        'Employability test %': 'etest_p'
    }
    x_axis = st.selectbox('Select X-axis variable', list(x_axis_mapping.keys()), format_func=lambda x: x)

    scatter_plot = px.scatter(df, x=x_axis_mapping[x_axis], y='salary', color='gender', color_discrete_map=color_mapping, labels={x_axis_mapping[x_axis]: x_axis, 'salary': 'Salary (INR/yr)'}, title='')
    scatter_plot.update_yaxes(title_text="Salary (INR/yr)")
    st.plotly_chart(scatter_plot)




def plot_degree_counts(data,selected_color_theme):
    st.subheader("Employment by Undergraduate Degree")
    # Group by degree and status, and count number of occurrences
    degree_counts = data.groupby(['degree_t', 'status']).size().unstack(fill_value=0)

    # Calculate total count for each category and sort bars
    degree_counts['Total'] = degree_counts.sum(axis=1)
    degree_counts = degree_counts.sort_values(by='Total', ascending=False)
    degree_counts = degree_counts.drop(columns=['Total'])

    # Reorder columns to force "Placed" at the bottom and "Unplaced" at the top
    degree_counts = degree_counts[['Placed', 'Not Placed']]

    # Plotting stacked bar chart with specified colors
    fig = px.bar(degree_counts, barmode='stack', color_discrete_map=color_theme_mapping2[selected_color_theme])
    # Update layout to set x-axis and y-axis labels
    fig.update_layout(
        xaxis_title="Undergraduate Degree",
        yaxis_title="Number of Students",
        showlegend=True
    )
    st.plotly_chart(fig)
    




# Sample data
categories = ['ssc_p', 'hsc_p', 'degree_p',  'mba_p', 'etest_p']
# Lists to store average scores for males and females
avg_scores_male = []
avg_scores_female = []

# Calculate average scores for males and females separately
for gender in ['M', 'F']:  # Iterate over male and female genders
    avg_scores = filtered_df[df['gender'] == gender][categories].mean().tolist()
    if gender == 'M':
        avg_scores_male = avg_scores
    else:
        avg_scores_female = avg_scores

# Function to plot radar chart
def plot_radar_chart(categories, values_male, values_female, title, color_mapping):
    st.subheader("Difference in Average Grades of Male and Female Students")
    fig, ax = plt.subplots(figsize=(3, 3), subplot_kw=dict(polar=True))
    
    category_labels = ['Secondaryschool grade', 'Highschool grades', 'Undergraduate grades', 'MBA grades', 'Employability score']  # Replace with your labels

    angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()
    values_male += values_male[:1]
    values_female += values_female[:1]
    angles += angles[:1]

    # Plot lines for male and female
    ax.plot(angles, values_male, color=color_mapping['M'], marker='o', label='Male',linewidth=0.5)
    ax.plot(angles, values_female, color=color_mapping['F'], marker='o', label='Female',linewidth=0.5)

    ax.set_yticklabels([])
    ax.set_title(title)
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(category_labels, fontsize = 5, ha='left')
    #ax.tick_params(axis='x', pad=2)
    ax.legend(loc='upper left', bbox_to_anchor=(1, 0.5),fontsize = 5)

    return fig


def make_radar_chart(df):
    categories = ['ssc_p', 'hsc_p', 'degree_p', 'mba_p']

    fig = go.Figure()

    # Add traces for male and female
    for gender in df['gender'].unique():
        avg_scores = df[df['gender'] == gender][categories].mean().tolist()
        avg_scores += avg_scores[:1]  # Repeat the first value to close the loop
        fig.add_trace(go.Scatterpolar(
            r=avg_scores,
            theta=categories + [categories[0]],
            fill='toself',
            name=gender
        ))

    # Update layout
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]  # Adjust range if needed
            )
        ),
        showlegend=True,
        title="Average Scores by Gender"
    )

    return fig





#st.write("<h3 style='text-align: center;'>Gender Distribution</h3>", unsafe_allow_html=True),st.write("<h3 style='text-align: center;'>Employment Distribution</h3>", unsafe_allow_html=True)
region_pie |  status_pie
#st.write("Males: Blue, Female:Yellow")
  
#gender_distribution(filtered_df,color_theme_mapping[selected_color_theme])

#status_distribution(filtered_df,color_theme_mapping2[selected_color_theme])

hist(filtered_df)
    

scatter_plot_matrix(color_theme_mapping[selected_color_theme],filtered_df)

plot_degree_counts(filtered_df,selected_color_theme)

    #st.write("Difference in Grades between Male and Female Students")
st.pyplot(plot_radar_chart(categories, avg_scores_male, avg_scores_female, "", color_theme_mapping[selected_color_theme]))

# Display violin plot with selected color theme
create_violin_plot(color_theme_mapping[selected_color_theme],filtered_df)








